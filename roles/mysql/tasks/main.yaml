- name: Install MySQL server
  ansible.builtin.apt:
    name: 
      - mysql-server
      - python3-pymysql
      - prometheus-mysqld-exporter
    state: present

- name: Add MySQL bind address override
  ansible.builtin.template:
    src: override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
  notify: Restart MySQL

- name: Ensure MySQL is running and enabled
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: yes

- name: MySQL database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify: Restart MySQL

- name: Create MySQL user
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
  no_log: true

- name: Create MySQL Exporter user
  community.mysql.mysql_user:
    name: "{{ exporter_user }}"
    password: "{{ exporter_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
  notify: Restart MySQL
  no_log: true

- name: Passing authentication data to MySQL Exporter
  ansible.builtin.template:
    src: .my.cnf.j2
    dest: "/var/lib/prometheus/.my.cnf"
    mode: '0600'
    owner: prometheus
  no_log: true
  notify: Restart MySQL Exporter

- name: Run prometheus exporter template
  ansible.builtin.template:
    src: mysql_metric.yaml.j2
    dest: /etc/default/prometheus-mysqld-exporter
    mode: '0644'
  notify: Restart MySQL Exporter

- name: Ensure the MySQL Exporter service is started
  ansible.builtin.service:
    name: prometheus-mysqld-exporter
    state: started

- name: Create /home/backup/mysql directory
  ansible.builtin.file:
    path: /home/backup/mysql
    state: directory
    owner: backup
    group: backup
    mode: '0755'
  
- name: Ensure MySQL backup user exist
  community.mysql.mysql_user:
    name: "{{ backup_user }}"
    password: "{{ backup_password }}"
    priv: "{{ mysql_database }}.*: SELECT, LOCK TABLES, SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    host: "{{ mysql_backup_host }}"
    state: present
  no_log: true

- name: Create backup template
  ansible.builtin.template:
    src: backup.my.cnf.j2
    dest: /home/backup/.my.cnf
    owner: backup
    group: backup
    mode: '0600'
  no_log: true
    
- name: Create Cron Backup
  ansible.builtin.template:
    src: mysql.backup.cron.j2
    dest: /etc/cron.d/mysql-backup
  notify: Restart cron
  no_log: true

- name: Ensure MySQL replication user exist
  community.mysql.mysql_user:
    name: "{{ replication_user }}"
    password: "{{replication_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    priv: "*.*: REPLICATION SLAVE"
    host: "%"
  no_log: true

- name: Handles dynamic MySQL parameters
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica
  
- name: Assign cnames
  include_role:
    name: "cname"
  vars:
    service: "db{{inventory_hostname | replace('davidayson8','')}}"
